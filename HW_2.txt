http://162.55.220.72:5005/first


1. Отправить запрос.

Collections -  New - HW_2

Add request - first

метод - GET

URL - http://162.55.220.72:5005/first

2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

Test Results: PASS

3. Проверить, что в body приходит правильный string.

pm.test("Проверить, что в body приходит правильный string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});

Test Results: PASS

http://162.55.220.72:5005/user_info_3

1. Отправить запрос.

Add request - user_info_3

Метод - POST

Body - from data

KEY        VALUE

name      Daria

age         35

salary      1000


2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

Test Results: PASS


3. Спарсить response body в json.

let jsonData = pm.response.json ();

4. Проверить, что name в ответе равно name s request (name вбить руками.)

pm.test("check name", function() {
    pm.expect(jsonData.name).to.eql("Daria");
});

Test Results: PASS

5. Проверить, что age в ответе равно age s request (age вбить руками.)

pm.test("check age", function() {
    pm.expect(jsonData.age).to.eql("35");
});

Test Results: PASS

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

pm.test("check salary", function() {
    pm.expect(jsonData.salary).to.eql(1000);
});

Test Results: PASS

7. Спарсить request.

let req = request.data

8. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("request - name", function () {
        pm.expect(jsonData.name).to.eql(req.name);
});

Test Results: PASS

9. Проверить, что age в ответе равно age s request (age забрать из request.)

pm.test("request - age", function () {
        pm.expect(jsonData.age).to.eql(req.age);
});

Test Results: PASS

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test("request - salary", function () {
        pm.expect(jsonData.salary).to.eql(+req.salary);
});

Test Results: PASS

11. Вывести в консоль параметр family из response.

console.log(jsonData.family)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

pm.test("salary*4", function() {
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);
});

Test Results: PASS


http://162.55.220.72:5005/object_info_3

1. Отправить запрос.

Add request - object_info_3

Метод - GET

Params

KEY        VALUE

name      Daria

age         35

salary     1000

2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

Test Results: PASS

3. Спарсить response body в json.

let jsonData = pm.response.json();

4. Спарсить request.

let getreq = pm.request.url.query.toObject()

5. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Проверить, что name в ответе равно name s request", function () {
    pm.expect(jsonData.name).to.eql(getreq.name);
});

Test Results: PASS

6. Проверить, что age в ответе равно age s request (age забрать из request.)

pm.test("Проверить, что age в ответе равно age s request", function () {
    pm.expect(jsonData.age).to.eql(getreq.age);
});

Test Results: PASS

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test("Проверить, что salary в ответе равно salary s request", function () {
    pm.expect(jsonData.salary).to.eql(+getreq.salary);
});

Test Results: PASS

8. Вывести в консоль параметр family из response.

console.log (jsonData.family)

9. Проверить, что у параметра dog есть параметры name.

pm.test("Проверить, что у параметра dog есть параметры name", function () {
    pm.expect(jsonData.family.pets.dog).to.have.property("name");
});

Test Results: PASS

10. Проверить, что у параметра dog есть параметры age.

pm.test("Проверить, что у параметра dog есть параметры age", function () {
    pm.expect(jsonData.family.pets.dog).to.have.property("age");
});

Test Results: PASS

11. Проверить, что параметр name имеет значение Luky.

let dog_name = jsonData.family.pets.dog.name;
console.log(dog_name)

pm.test("Проверить, что параметр name имеет значение Luky", function () {
    pm.expect(jsonData.family.pets.dog.name).to.eql("Luky");
});

Test Results: PASS

12. Проверить, что параметр age имеет значение 4.

let dog_age = jsonData.family.pets.dog.age;
console.log(dog_age)

pm.test("Проверить, что параметр age имеет значение 4", function () {
    pm.expect(dog_age).to.eql(4);
});

Test Results: PASS


http://162.55.220.72:5005/object_info_4

1. Отправить запрос.

Add request - object_info_4

Метод - GET

KEY        VALUE

name      Daria

age         35

salary     1000

2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

Test Results: PASS

3. Спарсить response body в json.

 let jsonData = pm.response.json();

4. Спарсить request.

let getreq = pm.request.url.query.toObject()

5. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Проверить, что name в ответе равно name s request", function() {
        pm.expect(jsonData.name).to.eql(getreq.name);
    });

6. Проверить, что age в ответе равно age из request (age забрать из request.)

pm.test("Проверить, что age в ответе равно age из request", function() {
        pm.expect(jsonData.age).to.eql(+getreq.age);
    });

7. Вывести в консоль параметр salary из request.

console.log(getreq.salary)

8. Вывести в консоль параметр salary из response.

console.log(jsonData.salary)

9. Вывести в консоль 0-й элемент параметра salary из response.

console.log(jsonData.salary[0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.

console.log(jsonData.salary[1])

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.

console.log(jsonData.salary[2])

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)

pm.test("Проверить, что 0-й элемент параметра salary равен salary из request", function () {
        pm.expect(jsonData.salary[0]).to.eql(+getreq.salary);
    });

Test Results: PASS

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)

pm.test("Проверить, что 1-й элемент параметра salary равен salary*2", function () {
        pm.expect(+jsonData.salary[1]).to.eql(+getreq.salary*2);
    });

Test Results: PASS

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)

 pm.test("Проверить, что 2-й элемент параметра salary равен salary*3 ", function () {
        pm.expect(+jsonData.salary[2]).to.eql(+getreq.salary*3);
    });

Test Results: PASS

15. Создать в окружении переменную name

pm.environment.set("name", getreq.name );

16. Создать в окружении переменную age

pm.environment.set("age", getreq.age);


17. Создать в окружении переменную salary

pm.environment.set("salary",getreq.salary);

18. Передать в окружение переменную name

19. Передать в окружение переменную age

20. Передать в окружение переменную salary

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

let salary = jsonData.salary;

for (item of jsonData.salary){
    console.log(item)
}

http://162.55.220.72:5005/user_info_2

1. Вставить параметр salary из окружения в request

Метод - POST


Body - from-data

KEY        VALUE

salary     {{salary}}

2. Вставить параметр age из окружения в age

KEY        VALUE

age         {{age}}

3. Вставить параметр name из окружения в name

KEY        VALUE

name      {{name}}

4. Отправить запрос.

5. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

Test Results: PASS

6. Спарсить response body в json.

let jsonData = pm.response.json();

7. Спарсить request.

let req = request.data;

8. Проверить, что json response имеет параметр start_qa_salary

pm.test("Проверить, что json response имеет параметр start_qa_salary", function () {
        pm.expect(jsonData).to.have.property("start_qa_salary");
});

Test Results: PASS

9. Проверить, что json response имеет параметр qa_salary_after_6_months

pm.test("Проверить, что json response имеет параметр qa_salary_after_6_months", function()  {
    pm.expect(jsonData).to.have.property("qa_salary_after_6_months");
});

Test Results: PASS

10. Проверить, что json response имеет параметр qa_salary_after_12_months

pm.test("Проверить, что json response имеет параметр qa_salary_after_12_months", function()  {
    pm.expect(jsonData).to.have.property("qa_salary_after_12_months");
});

Test Results: PASS

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year

pm.test("Проверить, что json response имеет параметр qa_salary_after_1.5_year", function()  {
    pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year");
});

Test Results: PASS

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years

pm.test("Проверить, что json response имеет параметр qa_salary_after_3.5_years", function()  {
    pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years");
});

Test Results: PASS

13. Проверить, что json response имеет параметр person

pm.test("Проверить, что json response имеет параметр person", function () {
        pm.expect(jsonData).to.have.property("person");
});

Test Results: PASS

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)

let req = request.data;
let req_salary = req.salary;
console.log(typeof(req_salary));

pm.test(" Проверить, что параметр start_qa_salary равен salary из request", function () {
        pm.expect(jsonData.start_qa_salary).to.eql(+req_salary);
});

Test Results: PASS

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)

pm.test("Проверить, что параметр qa_salary_after_6_months равен salary*2 из request ", function () {
        pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req_salary*2);
});

Test Results: PASS

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)

pm.test("Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request", function () {
        pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req_salary*2.7);
});

Test Results: PASS

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)

pm.test("Проверить, что параметр qa_salary_after_1.5_year  равен salary*3.3 из request", function () {
  pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(+req.salary*3.3);
});

Test Results: PASS

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)

pm.test("Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request", function () {
  pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(+req.salary*3.8);
});

Test Results: PASS

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)

pm.test("Проверить, что в параметре person, 1-й элемент из u_name равен salary из request", function () {
 pm.expect(jsonData.person.u_name[1]).to.eql(+req_salary);
});

Test Results: PASS

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)

let req_age = req.age;
console.log(typeof(req_age));

pm.test("Проверить, что что параметр u_age равен age из request", function () {
 pm.expect(jsonData.person.u_age).to.eql(+req_age);
});

Test Results: PASS

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)

pm.test("Проверить, что параметр u_salary_5_years равен salary*4.2", function () {
 pm.expect(jsonData.person.u_salary_5_years).to.eql(+req_salary*4.2);
});

Test Results: PASS
